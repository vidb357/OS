#include <stdio.h>
#include <stdbool.h>


struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int start_time;
    int completion_time;
};


void srt(struct Process processes[], int n) {
    int current_time = 0;
    bool is_completed[n];
    int total_completed = 0;
    for (int i = 0; i < n; i++)
        is_completed[i] = false;


    while (total_completed < n) {
        int shortest_remaining = -1;
        int shortest_burst = 999999;
        for (int i = 0; i < n; i++) {
            if (!is_completed[i] && processes[i].arrival_time <= current_time &&
                processes[i].burst_time < shortest_burst) {
                shortest_burst = processes[i].burst_time;
                shortest_remaining = i;
            }
        }
        if (shortest_remaining == -1) {
            current_time++;
            continue;
        }
        processes[shortest_remaining].remaining_time--;
        current_time++;


        if (processes[shortest_remaining].remaining_time == 0) {
            processes[shortest_remaining].completion_time = current_time;
            total_completed++;
            is_completed[shortest_remaining] = true;
        }
    }
}


int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);


    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].id = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }


    printf("Shortest Remaining Time (SRT) scheduling:\n");
    srt(processes, n);


    int total_waiting_time = 0;
    int total_turnaround_time = 0;
    for (int i = 0; i < n; i++) {
        processes[i].start_time = processes[i].completion_time - processes[i].burst_time;
        total_waiting_time += processes[i].start_time - processes[i].arrival_time;
        total_turnaround_time += processes[i].completion_time - processes[i].arrival_time;
    }
    double avg_waiting_time = (double) total_waiting_time / n;
    double avg_turnaround_time = (double) total_turnaround_time / n;


    printf("Average Waiting Time: %.2lf\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2lf\n", avg_turnaround_time);


    return 0;
}


